import { supabase } from '@/integrations/supabase/client';
import type { OfficialDocument } from '@/types/officialDocument';

export const officialDocumentService = {
  // ‡∏î‡∏∂‡∏á‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏£‡∏≤‡∏ä‡∏Å‡∏≤‡∏£‡∏ï‡∏≤‡∏° role ‡πÅ‡∏•‡∏∞‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç
  async fetchOfficialDocuments(userProfile?: any): Promise<OfficialDocument[]> {
    
    if (!userProfile) {
      console.log('‚ùå No user profile provided');
      return [];
    }

    let query = supabase
      .from('official_documents')
      .select('*')
      .order('created_at', { ascending: false });

    console.log('üë§ User position:', userProfile.position);

    // ‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏µ‡πà 2: ‡∏ò‡∏∏‡∏£‡∏Å‡∏≤‡∏£‡πÄ‡∏´‡πá‡∏ô‡∏ó‡∏∏‡∏Å‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£
    if (['government_employee', 'clerk_teacher'].includes(userProfile.position)) {
      console.log('üìã Clerk access - fetching all documents');
      // ‡∏ò‡∏∏‡∏£‡∏Å‡∏≤‡∏£‡πÄ‡∏´‡πá‡∏ô‡∏ó‡∏∏‡∏Å‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£ - ‡πÑ‡∏°‡πà‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
    } else if (['director', 'deputy_director', 'assistant_director'].includes(userProfile.position)) {
      console.log('üëî Executive access - filtering by approval level');
      // ‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏µ‡πà 3: ‡∏ú‡∏π‡πâ‡∏ö‡∏£‡∏¥‡∏´‡∏≤‡∏£‡πÄ‡∏´‡πá‡∏ô‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏ñ‡∏∂‡∏á‡∏ï‡∏≤‡∏°‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥
      const approvalLevel = this.getApprovalLevel(userProfile.position);
      query = query.or(`user_id.eq.${userProfile.user_id},current_approver_level.eq.${approvalLevel}`);
    } else {
      console.log('üë®‚Äçüíº Regular user access - own documents only');
      // ‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏µ‡πà 1: ‡∏ú‡∏π‡πâ‡∏≠‡∏∑‡πà‡∏ô‡πÄ‡∏´‡πá‡∏ô‡πÅ‡∏Ñ‡πà‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏Ç‡∏≠‡∏á‡∏ï‡∏ô‡πÄ‡∏≠‡∏á
      query = query.eq('user_id', userProfile.user_id);
    }

    const { data, error } = await query;
    console.log('üìä Query result:', { data: data?.length || 0, error });

    if (error) {
      console.error('‚ùå Database error:', error);
      throw error;
    }
    return data?.map(doc => ({ ...doc, creator_profile: null })) || [];
  },

  // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏ï‡∏≤‡∏° position
  getApprovalLevel(position: string): number {
    switch (position) {
      case 'assistant_director': return 1;
      case 'deputy_director': return 2;
      case 'director': return 3;
      default: return 0;
    }
  },

  // ‡∏î‡∏∂‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏≤‡∏° role ‡πÅ‡∏•‡∏∞‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç
  async fetchMemos(userProfile?: any): Promise<any[]> {
    console.log('üìù Fetching memos for profile:', userProfile);
    // ‡∏î‡∏∂‡∏á memos ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ‡πÑ‡∏°‡πà filter ‡∏ï‡∏≤‡∏° user/role
    let query = supabase
      .from('memos')
      .select('*')
      .order('created_at', { ascending: false });
    const { data, error } = await query;
    console.log('üìä Memos query result:', { 
      dataCount: data?.length || 0, 
      error,
      userPosition: userProfile?.position,
      userId: userProfile?.user_id,
      firstMemoUserId: data?.[0]?.user_id
    });
    if (error) {
      console.error('‚ùå Memos database error:', error);
      throw error;
    }
    return data || [];
  },

  // ‡∏ï‡∏µ‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£ (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ò‡∏∏‡∏£‡∏Å‡∏≤‡∏£)
  async rejectDocument(documentId: string, reason: string): Promise<void> {
    const { error } = await supabase
      .from('official_documents')
      .update({
        status: 'rejected',
        rejection_reason: reason,
        updated_at: new Date().toISOString()
      })
      .eq('id', documentId);

    if (error) throw error;
  },

  // ‡∏•‡∏á‡πÄ‡∏•‡∏Ç‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠
  async assignDocumentNumber(documentId: string, documentNumber: string): Promise<void> {
    const { error } = await supabase
      .from('official_documents')
      .update({
        document_number: documentNumber,
        status: 'in_progress',
        updated_at: new Date().toISOString()
      })
      .eq('id', documentId);

    if (error) throw error;
  },

  // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏≠‡∏•‡∏á‡∏ô‡∏≤‡∏°
  async setDocumentForSigning(documentId: string, signers: any[]): Promise<void> {
    // TODO: ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡∏•‡∏á‡∏ô‡∏≤‡∏°‡πÑ‡∏ß‡πâ‡πÉ‡∏ô metadata ‡∏´‡∏£‡∏∑‡∏≠ table ‡πÅ‡∏¢‡∏Å
    const { error } = await supabase
      .from('official_documents')
      .update({
        status: 'in_progress',
        current_approver_level: 1,
        updated_at: new Date().toISOString()
      })
      .eq('id', documentId);

    if (error) throw error;
  },

  // ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå PDF ‡πÉ‡∏´‡∏°‡πà
  async uploadNewPDF(documentId: string, file: File): Promise<any> {
    // ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏õ storage
    const fileName = `documents/${documentId}/${Date.now()}-${file.name}`;
    const { data: uploadData, error: uploadError } = await supabase.storage
      .from('documents')
      .upload(fileName, file);

    if (uploadError) throw uploadError;

    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï path ‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    const { error: updateError } = await supabase
      .from('official_documents')
      .update({
        updated_at: new Date().toISOString()
        // TODO: ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ü‡∏¥‡∏•‡∏î‡πå pdf_path ‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡πÉ‡∏ô table schema
      })
      .eq('id', documentId);

    if (updateError) throw updateError;
    return uploadData;
  },

  // ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå PDF
  async downloadPDF(filePath: string, fileName?: string): Promise<void> {
    const { data, error } = await supabase.storage
      .from('documents')
      .download(filePath);

    if (error) throw error;

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á URL ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î
    const url = window.URL.createObjectURL(data);
    const a = document.createElement('a');
    a.href = url;
    a.download = fileName || 'document.pdf';
    document.body.appendChild(a);
    a.click();
    window.URL.revokeObjectURL(url);
    document.body.removeChild(a);
  },

  // ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÑ‡∏ü‡∏•‡πå PDF ‡∏à‡∏≤‡∏Å‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå memos
  async fetchMemoPDFFiles(): Promise<any[]> {
    const { data: folders, error: folderError } = await supabase.storage
      .from('documents')
      .list('memos', { limit: 100 });

    if (folderError) {
      console.error('Error fetching memo folders:', folderError);
      return [];
    }

    const pdfFiles = [];
    
    // ‡∏ß‡∏ô‡∏•‡∏π‡∏õ‡∏ú‡πà‡∏≤‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå (user_id)
    for (const folder of folders || []) {
      if (folder.name && folder.id) {
        const { data: files, error: filesError } = await supabase.storage
          .from('documents')
          .list(`memos/${folder.name}`, { limit: 100 });

        if (!filesError && files) {
          for (const file of files) {
            if (file.name.endsWith('.pdf')) {
              const publicUrl = supabase.storage
                .from('documents')
                .getPublicUrl(`memos/${folder.name}/${file.name}`);

              pdfFiles.push({
                id: `${folder.name}-${file.name}`,
                user_id: folder.name,
                file_name: file.name,
                file_path: `memos/${folder.name}/${file.name}`,
                public_url: publicUrl.data.publicUrl,
                created_at: file.created_at,
                updated_at: file.updated_at,
                size: file.metadata?.size || 0
              });
            }
          }
        }
      }
    }

    return pdfFiles;
  },

  // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏î‡∏™‡∏≠‡∏ö
  async createTestMemo(testData: any): Promise<void> {
    const { error } = await supabase
      .from('memos')
      .insert([testData]);

    if (error) throw error;
  }
};